// particle playground app//
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Particle Generator</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Arial', sans-serif;
            background: #0a0a0a;
            color: white;
            overflow: hidden;
        }

        #canvas {
            position: fixed;
            top: 0;
            left: 0;
            cursor: crosshair;
            background: radial-gradient(circle at 50% 50%, #1a1a2e 0%, #0a0a0a 100%);
        }

        .controls {
            position: fixed;
            top: 20px;
            right: 20px;
            background: rgba(20, 20, 40, 0.9);
            backdrop-filter: blur(10px);
            padding: 20px;
            border-radius: 15px;
            border: 1px solid rgba(255, 255, 255, 0.1);
            width: 300px;
            max-height: 90vh;
            overflow-y: auto;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.5);
        }

        .controls h2 {
            margin-bottom: 15px;
            color: #00d4ff;
            font-size: 18px;
        }

        .control-group {
            margin-bottom: 15px;
        }

        .control-group label {
            display: block;
            margin-bottom: 5px;
            font-size: 12px;
            color: #aaa;
            text-transform: uppercase;
        }

        input[type="range"] {
            width: 100%;
            height: 6px;
            border-radius: 3px;
            background: #333;
            outline: none;
            margin-bottom: 5px;
        }

        input[type="range"]::-webkit-slider-thumb {
            appearance: none;
            width: 16px;
            height: 16px;
            border-radius: 50%;
            background: #00d4ff;
            cursor: pointer;
            box-shadow: 0 0 10px rgba(0, 212, 255, 0.5);
        }

        input[type="color"] {
            width: 100%;
            height: 40px;
            border: none;
            border-radius: 8px;
            cursor: pointer;
        }

        select {
            width: 100%;
            padding: 8px;
            background: #333;
            color: white;
            border: 1px solid #555;
            border-radius: 8px;
            cursor: pointer;
        }

        .preset-buttons {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 10px;
            margin-top: 15px;
        }

        .preset-btn {
            padding: 8px;
            background: linear-gradient(45deg, #00d4ff, #0099cc);
            border: none;
            border-radius: 8px;
            color: white;
            cursor: pointer;
            font-size: 11px;
            transition: all 0.3s ease;
        }

        .preset-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0, 212, 255, 0.3);
        }

        .info {
            position: fixed;
            bottom: 20px;
            left: 20px;
            background: rgba(20, 20, 40, 0.8);
            padding: 15px;
            border-radius: 10px;
            font-size: 12px;
            color: #aaa;
            border: 1px solid rgba(255, 255, 255, 0.1);
        }

        .value-display {
            font-size: 11px;
            color: #00d4ff;
            float: right;
        }

        ::-webkit-scrollbar {
            width: 6px;
        }

        ::-webkit-scrollbar-track {
            background: rgba(255, 255, 255, 0.1);
            border-radius: 3px;
        }

        ::-webkit-scrollbar-thumb {
            background: #00d4ff;
            border-radius: 3px;
        }
    </style>
</head>
<body>
    <canvas id="canvas"></canvas>
    
    <div class="controls">
        <h2>Particle Generator</h2>
        
        <div class="control-group">
            <label>Particle Count <span class="value-display" id="countDisplay">100</span></label>
            <input type="range" id="particleCount" min="10" max="500" value="100">
        </div>
        
        <div class="control-group">
            <label>Size <span class="value-display" id="sizeDisplay">3</span></label>
            <input type="range" id="particleSize" min="1" max="15" value="3">
        </div>
        
        <div class="control-group">
            <label>Speed <span class="value-display" id="speedDisplay">2</span></label>
            <input type="range" id="particleSpeed" min="0.1" max="10" step="0.1" value="2">
        </div>
        
        <div class="control-group">
            <label>Color</label>
            <input type="color" id="particleColor" value="#00d4ff">
        </div>
        
        <div class="control-group">
            <label>Interaction Force <span class="value-display" id="forceDisplay">50</span></label>
            <input type="range" id="interactionForce" min="0" max="200" value="50">
        </div>
        
        <div class="control-group">
            <label>Gravity <span class="value-display" id="gravityDisplay">0.1</span></label>
            <input type="range" id="gravity" min="0" max="2" step="0.1" value="0.1">
        </div>
        
        <div class="control-group">
            <label>Trail Length <span class="value-display" id="trailDisplay">20</span></label>
            <input type="range" id="trailLength" min="0" max="100" value="20">
        </div>
        
        <div class="control-group">
            <label>Particle Shape</label>
            <select id="particleShape">
                <option value="circle">Circle</option>
                <option value="square">Square</option>
                <option value="triangle">Triangle</option>
                <option value="star">Star</option>
            </select>
        </div>
        
        <div class="control-group">
            <label>Interaction Mode</label>
            <select id="interactionMode">
                <option value="attract">Attract</option>
                <option value="repel">Repel</option>
                <option value="orbital">Orbital</option>
                <option value="explode">Explode</option>
            </select>
        </div>
        
        <div class="preset-buttons">
            <button class="preset-btn" onclick="loadPreset('galaxy')">Galaxy</button>
            <button class="preset-btn" onclick="loadPreset('fireworks')">Fireworks</button>
            <button class="preset-btn" onclick="loadPreset('snow')">Snow</button>
            <button class="preset-btn" onclick="loadPreset('plasma')">Plasma</button>
            <button class="preset-btn" onclick="loadPreset('nebula')">Nebula</button>
            <button class="preset-btn" onclick="clearParticles()">Clear</button>
        </div>
    </div>
    
    <div class="info">
        <strong>Controls:</strong><br>
        • Click/Touch to interact with particles<br>
        • Drag for continuous interaction<br>
        • Use presets for quick effects
    </div>

    <script>
        const canvas = document.getElementById('canvas');
        const ctx = canvas.getContext('2d');
        
        // Set canvas size
        function resizeCanvas() {
            canvas.width = window.innerWidth;
            canvas.height = window.innerHeight;
        }
        resizeCanvas();
        window.addEventListener('resize', resizeCanvas);
        
        // Particle system
        let particles = [];
        let mouse = { x: 0, y: 0, isDown: false };
        
        // Control elements
        const controls = {
            count: document.getElementById('particleCount'),
            size: document.getElementById('particleSize'),
            speed: document.getElementById('particleSpeed'),
            color: document.getElementById('particleColor'),
            force: document.getElementById('interactionForce'),
            gravity: document.getElementById('gravity'),
            trail: document.getElementById('trailLength'),
            shape: document.getElementById('particleShape'),
            mode: document.getElementById('interactionMode')
        };
        
        // Value displays
        const displays = {
            count: document.getElementById('countDisplay'),
            size: document.getElementById('sizeDisplay'),
            speed: document.getElementById('speedDisplay'),
            force: document.getElementById('forceDisplay'),
            gravity: document.getElementById('gravityDisplay'),
            trail: document.getElementById('trailDisplay')
        };
        
        // Update displays
        function updateDisplays() {
            displays.count.textContent = controls.count.value;
            displays.size.textContent = controls.size.value;
            displays.speed.textContent = controls.speed.value;
            displays.force.textContent = controls.force.value;
            displays.gravity.textContent = controls.gravity.value;
            displays.trail.textContent = controls.trail.value + '%';
        }
        
        // Add event listeners
        Object.keys(controls).forEach(key => {
            controls[key].addEventListener('input', updateDisplays);
        });
        updateDisplays();
        
        // Particle class
        class Particle {
            constructor(x, y) {
                this.x = x || Math.random() * canvas.width;
                this.y = y || Math.random() * canvas.height;
                this.vx = (Math.random() - 0.5) * 2;
                this.vy = (Math.random() - 0.5) * 2;
                this.life = 1;
                this.decay = Math.random() * 0.005 + 0.001;
            }
            
            update() {
                // Apply gravity
                this.vy += parseFloat(controls.gravity.value);
                
                // Mouse interaction
                if (mouse.isDown) {
                    const dx = mouse.x - this.x;
                    const dy = mouse.y - this.y;
                    const distance = Math.sqrt(dx * dx + dy * dy);
                    const force = parseFloat(controls.force.value) / distance;
                    
                    const mode = controls.mode.value;
                    switch (mode) {
                        case 'attract':
                            this.vx += dx * force * 0.001;
                            this.vy += dy * force * 0.001;
                            break;
                        case 'repel':
                            this.vx -= dx * force * 0.001;
                            this.vy -= dy * force * 0.001;
                            break;
                        case 'orbital':
                            this.vx += -dy * force * 0.0005;
                            this.vy += dx * force * 0.0005;
                            break;
                        case 'explode':
                            if (distance < 100) {
                                this.vx += (Math.random() - 0.5) * force * 0.01;
                                this.vy += (Math.random() - 0.5) * force * 0.01;
                            }
                            break;
                    }
                }
                
                // Apply speed multiplier
                const speedMult = parseFloat(controls.speed.value);
                this.x += this.vx * speedMult;
                this.y += this.vy * speedMult;
                
                // Bounce off edges
                if (this.x <= 0 || this.x >= canvas.width) this.vx *= -0.8;
                if (this.y <= 0 || this.y >= canvas.height) this.vy *= -0.8;
                
                // Keep in bounds
                this.x = Math.max(0, Math.min(canvas.width, this.x));
                this.y = Math.max(0, Math.min(canvas.height, this.y));
                
                // Update life
                this.life -= this.decay;
            }
            
            draw() {
                ctx.save();
                ctx.globalAlpha = this.life;
                
                const size = parseFloat(controls.size.value);
                const color = controls.color.value;
                
                ctx.fillStyle = color;
                ctx.strokeStyle = color;
                
                ctx.translate(this.x, this.y);
                
                const shape = controls.shape.value;
                switch (shape) {
                    case 'circle':
                        ctx.beginPath();
                        ctx.arc(0, 0, size, 0, Math.PI * 2);
                        ctx.fill();
                        break;
                    case 'square':
                        ctx.fillRect(-size/2, -size/2, size, size);
                        break;
                    case 'triangle':
                        ctx.beginPath();
                        ctx.moveTo(0, -size);
                        ctx.lineTo(-size, size);
                        ctx.lineTo(size, size);
                        ctx.closePath();
                        ctx.fill();
                        break;
                    case 'star':
                        this.drawStar(0, 0, 5, size, size/2);
                        ctx.fill();
                        break;
                }
                
                ctx.restore();
            }
            
            drawStar(cx, cy, spikes, outerRadius, innerRadius) {
                let rot = Math.PI / 2 * 3;
                let x = cx;
                let y = cy;
                const step = Math.PI / spikes;
                
                ctx.beginPath();
                ctx.moveTo(cx, cy - outerRadius);
                
                for (let i = 0; i < spikes; i++) {
                    x = cx + Math.cos(rot) * outerRadius;
                    y = cy + Math.sin(rot) * outerRadius;
                    ctx.lineTo(x, y);
                    rot += step;
                    
                    x = cx + Math.cos(rot) * innerRadius;
                    y = cy + Math.sin(rot) * innerRadius;
                    ctx.lineTo(x, y);
                    rot += step;
                }
                
                ctx.lineTo(cx, cy - outerRadius);
                ctx.closePath();
            }
        }
        
        // Initialize particles
        function initParticles() {
            particles = [];
            const count = parseInt(controls.count.value);
            for (let i = 0; i < count; i++) {
                particles.push(new Particle());
            }
        }
        
        // Animation loop
        function animate() {
            // Trail effect
            const trailAlpha = 1 - (parseFloat(controls.trail.value) / 100);
            ctx.fillStyle = `rgba(10, 10, 10, ${trailAlpha})`;
            ctx.fillRect(0, 0, canvas.width, canvas.height);
            
            // Update and draw particles
            for (let i = particles.length - 1; i >= 0; i--) {
                const particle = particles[i];
                particle.update();
                particle.draw();
                
                // Remove dead particles
                if (particle.life <= 0) {
                    particles.splice(i, 1);
                }
            }
            
            // Maintain particle count
            const targetCount = parseInt(controls.count.value);
            while (particles.length < targetCount) {
                particles.push(new Particle());
            }
            
            requestAnimationFrame(animate);
        }
        
        // Mouse/touch events
        function getEventPos(e) {
            const rect = canvas.getBoundingClientRect();
            return {
                x: (e.clientX || e.touches[0].clientX) - rect.left,
                y: (e.clientY || e.touches[0].clientY) - rect.top
            };
        }
        
        canvas.addEventListener('mousedown', (e) => {
            const pos = getEventPos(e);
            mouse.x = pos.x;
            mouse.y = pos.y;
            mouse.isDown = true;
        });
        
        canvas.addEventListener('mousemove', (e) => {
            const pos = getEventPos(e);
            mouse.x = pos.x;
            mouse.y = pos.y;
        });
        
        canvas.addEventListener('mouseup', () => {
            mouse.isDown = false;
        });
        
        // Touch events
        canvas.addEventListener('touchstart', (e) => {
            e.preventDefault();
            const pos = getEventPos(e);
            mouse.x = pos.x;
            mouse.y = pos.y;
            mouse.isDown = true;
        });
        
        canvas.addEventListener('touchmove', (e) => {
            e.preventDefault();
            const pos = getEventPos(e);
            mouse.x = pos.x;
            mouse.y = pos.y;
        });
        
        canvas.addEventListener('touchend', (e) => {
            e.preventDefault();
            mouse.isDown = false;
        });
        
        // Preset configurations
        const presets = {
            galaxy: {
                count: 200, size: 2, speed: 1, color: '#9966ff', 
                force: 30, gravity: 0, trail: 40, shape: 'circle', mode: 'orbital'
            },
            fireworks: {
                count: 150, size: 4, speed: 5, color: '#ff6600', 
                force: 100, gravity: 0.5, trail: 10, shape: 'star', mode: 'explode'
            },
            snow: {
                count: 100, size: 3, speed: 0.5, color: '#ffffff', 
                force: 10, gravity: 0.2, trail: 80, shape: 'circle', mode: 'attract'
            },
            plasma: {
                count: 300, size: 1, speed: 3, color: '#00ffff', 
                force: 80, gravity: 0, trail: 60, shape: 'circle', mode: 'repel'
            },
            nebula: {
                count: 250, size: 2, speed: 1.5, color: '#ff3366', 
                force: 40, gravity: 0.1, trail: 90, shape: 'triangle', mode: 'orbital'
            }
        };
        
        function loadPreset(name) {
            const preset = presets[name];
            if (preset) {
                Object.keys(preset).forEach(key => {
                    if (controls[key]) {
                        controls[key].value = preset[key];
                    }
                });
                updateDisplays();
                initParticles();
            }
        }
        
        function clearParticles() {
            particles = [];
        }
        
        // Start the show
        initParticles();
        animate();
    </script>
</body>
</html>
